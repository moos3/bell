// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: proto/dns_service/v1/dns_service.proto

package v1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AuthenticateRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ApiKey        string                 `protobuf:"bytes,1,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AuthenticateRequest) Reset() {
	*x = AuthenticateRequest{}
	mi := &file_proto_dns_service_v1_dns_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuthenticateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticateRequest) ProtoMessage() {}

func (x *AuthenticateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dns_service_v1_dns_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticateRequest.ProtoReflect.Descriptor instead.
func (*AuthenticateRequest) Descriptor() ([]byte, []int) {
	return file_proto_dns_service_v1_dns_service_proto_rawDescGZIP(), []int{0}
}

func (x *AuthenticateRequest) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

type AuthenticateResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Valid         bool                   `protobuf:"varint,1,opt,name=valid,proto3" json:"valid,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AuthenticateResponse) Reset() {
	*x = AuthenticateResponse{}
	mi := &file_proto_dns_service_v1_dns_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuthenticateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticateResponse) ProtoMessage() {}

func (x *AuthenticateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dns_service_v1_dns_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticateResponse.ProtoReflect.Descriptor instead.
func (*AuthenticateResponse) Descriptor() ([]byte, []int) {
	return file_proto_dns_service_v1_dns_service_proto_rawDescGZIP(), []int{1}
}

func (x *AuthenticateResponse) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

func (x *AuthenticateResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetRecordsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Domain        string                 `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	RecordType    []string               `protobuf:"bytes,2,rep,name=record_type,json=recordType,proto3" json:"record_type,omitempty"` // Optional filter (e.g., ["CNAME", "A"])
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRecordsRequest) Reset() {
	*x = GetRecordsRequest{}
	mi := &file_proto_dns_service_v1_dns_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRecordsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecordsRequest) ProtoMessage() {}

func (x *GetRecordsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dns_service_v1_dns_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecordsRequest.ProtoReflect.Descriptor instead.
func (*GetRecordsRequest) Descriptor() ([]byte, []int) {
	return file_proto_dns_service_v1_dns_service_proto_rawDescGZIP(), []int{2}
}

func (x *GetRecordsRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *GetRecordsRequest) GetRecordType() []string {
	if x != nil {
		return x.RecordType
	}
	return nil
}

type DNSRecord struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DomainId      int32                  `protobuf:"varint,1,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	RecordType    string                 `protobuf:"bytes,2,opt,name=record_type,json=recordType,proto3" json:"record_type,omitempty"`
	RecordData    string                 `protobuf:"bytes,3,opt,name=record_data,json=recordData,proto3" json:"record_data,omitempty"`
	Ttl           int32                  `protobuf:"varint,4,opt,name=ttl,proto3" json:"ttl,omitempty"`
	Source        string                 `protobuf:"bytes,5,opt,name=source,proto3" json:"source,omitempty"`
	LastUpdated   string                 `protobuf:"bytes,6,opt,name=last_updated,json=lastUpdated,proto3" json:"last_updated,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DNSRecord) Reset() {
	*x = DNSRecord{}
	mi := &file_proto_dns_service_v1_dns_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DNSRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DNSRecord) ProtoMessage() {}

func (x *DNSRecord) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dns_service_v1_dns_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DNSRecord.ProtoReflect.Descriptor instead.
func (*DNSRecord) Descriptor() ([]byte, []int) {
	return file_proto_dns_service_v1_dns_service_proto_rawDescGZIP(), []int{3}
}

func (x *DNSRecord) GetDomainId() int32 {
	if x != nil {
		return x.DomainId
	}
	return 0
}

func (x *DNSRecord) GetRecordType() string {
	if x != nil {
		return x.RecordType
	}
	return ""
}

func (x *DNSRecord) GetRecordData() string {
	if x != nil {
		return x.RecordData
	}
	return ""
}

func (x *DNSRecord) GetTtl() int32 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

func (x *DNSRecord) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *DNSRecord) GetLastUpdated() string {
	if x != nil {
		return x.LastUpdated
	}
	return ""
}

type GetRecordsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Records       []*DNSRecord           `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRecordsResponse) Reset() {
	*x = GetRecordsResponse{}
	mi := &file_proto_dns_service_v1_dns_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRecordsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecordsResponse) ProtoMessage() {}

func (x *GetRecordsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dns_service_v1_dns_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecordsResponse.ProtoReflect.Descriptor instead.
func (*GetRecordsResponse) Descriptor() ([]byte, []int) {
	return file_proto_dns_service_v1_dns_service_proto_rawDescGZIP(), []int{4}
}

func (x *GetRecordsResponse) GetRecords() []*DNSRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

var File_proto_dns_service_v1_dns_service_proto protoreflect.FileDescriptor

const file_proto_dns_service_v1_dns_service_proto_rawDesc = "" +
	"\n" +
	"&proto/dns_service/v1/dns_service.proto\x12\x0edns_service.v1\x1a\x1cgoogle/api/annotations.proto\x1a\x1bgoogle/protobuf/empty.proto\".\n" +
	"\x13AuthenticateRequest\x12\x17\n" +
	"\aapi_key\x18\x01 \x01(\tR\x06apiKey\"F\n" +
	"\x14AuthenticateResponse\x12\x14\n" +
	"\x05valid\x18\x01 \x01(\bR\x05valid\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\"L\n" +
	"\x11GetRecordsRequest\x12\x16\n" +
	"\x06domain\x18\x01 \x01(\tR\x06domain\x12\x1f\n" +
	"\vrecord_type\x18\x02 \x03(\tR\n" +
	"recordType\"\xb7\x01\n" +
	"\tDNSRecord\x12\x1b\n" +
	"\tdomain_id\x18\x01 \x01(\x05R\bdomainId\x12\x1f\n" +
	"\vrecord_type\x18\x02 \x01(\tR\n" +
	"recordType\x12\x1f\n" +
	"\vrecord_data\x18\x03 \x01(\tR\n" +
	"recordData\x12\x10\n" +
	"\x03ttl\x18\x04 \x01(\x05R\x03ttl\x12\x16\n" +
	"\x06source\x18\x05 \x01(\tR\x06source\x12!\n" +
	"\flast_updated\x18\x06 \x01(\tR\vlastUpdated\"I\n" +
	"\x12GetRecordsResponse\x123\n" +
	"\arecords\x18\x01 \x03(\v2\x19.dns_service.v1.DNSRecordR\arecords2\xf7\x01\n" +
	"\n" +
	"DNSService\x12v\n" +
	"\fAuthenticate\x12#.dns_service.v1.AuthenticateRequest\x1a$.dns_service.v1.AuthenticateResponse\"\x1b\x82\xd3\xe4\x93\x02\x15:\x01*\"\x10/v1/authenticate\x12q\n" +
	"\n" +
	"GetRecords\x12!.dns_service.v1.GetRecordsRequest\x1a\".dns_service.v1.GetRecordsResponse\"\x1c\x82\xd3\xe4\x93\x02\x16\x12\x14/v1/records/{domain}B8Z6github.com/moos3/dns_tools/server/proto/dns_service/v1b\x06proto3"

var (
	file_proto_dns_service_v1_dns_service_proto_rawDescOnce sync.Once
	file_proto_dns_service_v1_dns_service_proto_rawDescData []byte
)

func file_proto_dns_service_v1_dns_service_proto_rawDescGZIP() []byte {
	file_proto_dns_service_v1_dns_service_proto_rawDescOnce.Do(func() {
		file_proto_dns_service_v1_dns_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_dns_service_v1_dns_service_proto_rawDesc), len(file_proto_dns_service_v1_dns_service_proto_rawDesc)))
	})
	return file_proto_dns_service_v1_dns_service_proto_rawDescData
}

var file_proto_dns_service_v1_dns_service_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_proto_dns_service_v1_dns_service_proto_goTypes = []any{
	(*AuthenticateRequest)(nil),  // 0: dns_service.v1.AuthenticateRequest
	(*AuthenticateResponse)(nil), // 1: dns_service.v1.AuthenticateResponse
	(*GetRecordsRequest)(nil),    // 2: dns_service.v1.GetRecordsRequest
	(*DNSRecord)(nil),            // 3: dns_service.v1.DNSRecord
	(*GetRecordsResponse)(nil),   // 4: dns_service.v1.GetRecordsResponse
}
var file_proto_dns_service_v1_dns_service_proto_depIdxs = []int32{
	3, // 0: dns_service.v1.GetRecordsResponse.records:type_name -> dns_service.v1.DNSRecord
	0, // 1: dns_service.v1.DNSService.Authenticate:input_type -> dns_service.v1.AuthenticateRequest
	2, // 2: dns_service.v1.DNSService.GetRecords:input_type -> dns_service.v1.GetRecordsRequest
	1, // 3: dns_service.v1.DNSService.Authenticate:output_type -> dns_service.v1.AuthenticateResponse
	4, // 4: dns_service.v1.DNSService.GetRecords:output_type -> dns_service.v1.GetRecordsResponse
	3, // [3:5] is the sub-list for method output_type
	1, // [1:3] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_proto_dns_service_v1_dns_service_proto_init() }
func file_proto_dns_service_v1_dns_service_proto_init() {
	if File_proto_dns_service_v1_dns_service_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_dns_service_v1_dns_service_proto_rawDesc), len(file_proto_dns_service_v1_dns_service_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_dns_service_v1_dns_service_proto_goTypes,
		DependencyIndexes: file_proto_dns_service_v1_dns_service_proto_depIdxs,
		MessageInfos:      file_proto_dns_service_v1_dns_service_proto_msgTypes,
	}.Build()
	File_proto_dns_service_v1_dns_service_proto = out.File
	file_proto_dns_service_v1_dns_service_proto_goTypes = nil
	file_proto_dns_service_v1_dns_service_proto_depIdxs = nil
}
